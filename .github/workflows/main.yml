name: Build
on: [push]
env:
  TOOLCHAIN_VERSION: 0.11.0
  CACHE_DIR: /home/runner/work/image-rootfs/image-rootfs/cache
jobs:
  build:
    runs-on: ubuntu-22.04
    services:
      nginx:
        image: nginx
        ports:
          - 8080:80
        volumes:
          - /home/runner/work/cache:/usr/share/nginx/html
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Copy default Buildroot and Busybox config
        run: make init-config

      - name: Setup primary site
        run: sed -i -e 's#BR2_PRIMARY_SITE=""#BR2_PRIMARY_SITE="http://172.17.0.1:8080"#' cartesi-buildroot-config

      - name: Setup download cache
        id: buildroot-cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-buildroot-cache-files
          path: ${{ env.CACHE_DIR }}
          restore-keys: ${{ runner.os }}-buildroot-cache-files

      - name: Copy GitHub cache to nginx cache folder
        run: if [ -d ${{ env.CACHE_DIR }} ]; then sudo mv ${{ env.CACHE_DIR }}/* /home/runner/work/cache; fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/rootfs
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create distribution details
        run: make skel/etc/os-release

      - name: Build docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ steps.docker_meta.outputs.tags }}
          push: false
          load: true
          build-args: |
            TOOLCHAIN_REPOSITORY=${{ secrets.DOCKER_ORGANIZATION }}/toolchain
            TOOLCHAIN_VERSION=${{ env.TOOLCHAIN_VERSION }}
          cache-from: type=gha,mode=max,scope=regular
          cache-to: type=gha,scope=regular

      - name: Export rootfs.ext2 artifact
        run: make copy IMG=`echo "${{ steps.docker_meta.outputs.tags }}" | head -1 | cut -d "," -f 1 | xargs`

      - name: Export download cache
        run: make copy-br2-dl-cache CACHE_DIR=${{ env.CACHE_DIR }} IMG=`echo "${{ steps.docker_meta.outputs.tags }}" | head -1 | cut -d "," -f 1 | xargs`

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          prerelease: true
          files: rootfs.ext2
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Push docker image
        id: docker_push
        uses: docker/build-push-action@v2
        if: ${{ startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/develop') }}
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ steps.docker_meta.outputs.tags }}
          push: true
          load: false
          build-args: |
            TOOLCHAIN_REPOSITORY=${{ secrets.DOCKER_ORGANIZATION }}/toolchain
            TOOLCHAIN_VERSION=${{ env.TOOLCHAIN_VERSION }}
          cache-from: type=gha,mode=max,scope=regular
          cache-to: type=gha,scope=regular

  build-fd-emulation:
    runs-on: ubuntu-22.04
    # Do not publish fs-emulation images
    if: false
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Copy default Buildroot and Busybox config
        run: make init-config fd_emulation=yes

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/rootfs
          flavor: |
            latest=false
            suffix=-fd-emulation
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ steps.docker_meta.outputs.tags }}
          push: false
          load: true
          build-args: |
            TOOLCHAIN_REPOSITORY=${{ secrets.DOCKER_ORGANIZATION }}/toolchain
            TOOLCHAIN_VERSION=${{ env.TOOLCHAIN_VERSION }}-fd-emulation
            RISCV_ARCH=rv64imafd
            RISCV_ABI=lp64d
          cache-from: type=gha,mode=max,scope=fd
          cache-to: type=gha,scope=fd

      - name: Export rootfs.ext2 artifact
        run: make copy IMG=`echo "${{ steps.docker_meta.outputs.tags }}" | head -1 | cut -d "," -f 1 | xargs`

      - name: Rename binary
        run: mv rootfs.ext2 rootfs-fd-emulation.ext2

      - uses: softprops/action-gh-release@v1
        # Do not publish fd binaries
        # if: startsWith(github.ref, 'refs/tags/v')
        if: false
        with:
          prerelease: true
          files: rootfs-fd-emulation.ext2
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Push docker image
        id: docker_push
        uses: docker/build-push-action@v2
        # Do not publish fs-emulation images
        # if: ${{ startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/develop') }}
        if: false
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ steps.docker_meta.outputs.tags }}
          push: true
          load: false
          build-args: |
            TOOLCHAIN_REPOSITORY=${{ secrets.DOCKER_ORGANIZATION }}/toolchain
            TOOLCHAIN_VERSION=${{ env.TOOLCHAIN_VERSION }}-fd-emulation
            RISCV_ARCH=rv64imafd
            RISCV_ABI=lp64d
          cache-from: type=gha,mode=max,scope=fd
          cache-to: type=gha,scope=fd
