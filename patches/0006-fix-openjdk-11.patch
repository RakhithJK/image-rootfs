diff -aruN a/package/openjdk/11.0.8+10/0002-fix-openjdk-11.patch b/package/openjdk/11.0.8+10/0002-fix-openjdk-11.patch
--- a/package/openjdk/11.0.8+10/0002-fix-openjdk-11.patch	1969-12-31 21:00:00.000000000 -0300
+++ b/package/openjdk/11.0.8+10/0002-fix-openjdk-11.patch	2022-03-15 18:34:06.172379978 -0300
@@ -0,0 +1,109 @@
+diff -ruN openjdk-11.0.8+10.old/make/autoconf/build-aux/autoconf-config.sub openjdk-11.0.8+10/make/autoconf/build-aux/autoconf-config.sub
+--- openjdk-11.0.8+10.old/make/autoconf/build-aux/autoconf-config.sub	2022-02-03 12:48:45.622272579 -0300
++++ openjdk-11.0.8+10/make/autoconf/build-aux/autoconf-config.sub	2022-02-03 12:51:28.818495081 -0300
+@@ -1213,6 +1213,9 @@
+ 	pmac | pmac-mpw)
+ 		basic_machine=powerpc-apple
+ 		;;
++	riscv64-cartesi)
++		basic_machine=riscv64-cartesi
++		;;
+ 	*-unknown)
+ 		# Make sure to match an already-canonicalized machine name.
+ 		;;
+diff -ruN openjdk-11.0.8+10.old/make/autoconf/platform.m4 openjdk-11.0.8+10/make/autoconf/platform.m4
+--- openjdk-11.0.8+10.old/make/autoconf/platform.m4	2022-02-03 12:48:45.625605903 -0300
++++ openjdk-11.0.8+10/make/autoconf/platform.m4	2022-02-03 12:51:52.781766746 -0300
+@@ -150,6 +150,12 @@
+       VAR_CPU_BITS=64
+       VAR_CPU_ENDIAN=big
+       ;;
++    riscv64)
++      VAR_CPU=riscv64
++      VAR_CPU_ARCH=riscv64
++      VAR_CPU_BITS=64
++      VAR_CPU_ENDIAN=little
++      ;;
+     *)
+       AC_MSG_ERROR([unsupported cpu $1])
+       ;;
+diff -ruN openjdk-11.0.8+10.old/src/hotspot/os/linux/os_linux.cpp openjdk-11.0.8+10/src/hotspot/os/linux/os_linux.cpp
+--- openjdk-11.0.8+10.old/src/hotspot/os/linux/os_linux.cpp	2022-02-03 12:48:46.075604616 -0300
++++ openjdk-11.0.8+10/src/hotspot/os/linux/os_linux.cpp	2022-02-03 12:53:22.371523567 -0300
+@@ -1825,6 +1825,9 @@
+ #ifndef EM_AARCH64
+   #define EM_AARCH64    183               /* ARM AARCH64 */
+ #endif
++#ifndef EM_RISCV
++  #define EM_RISCV      243               /* RISCV */
++#endif
+ 
+   static const arch_t arch_array[]={
+     {EM_386,         EM_386,     ELFCLASS32, ELFDATA2LSB, (char*)"IA 32"},
+@@ -1850,6 +1853,7 @@
+     {EM_PARISC,      EM_PARISC,  ELFCLASS32, ELFDATA2MSB, (char*)"PARISC"},
+     {EM_68K,         EM_68K,     ELFCLASS32, ELFDATA2MSB, (char*)"M68k"},
+     {EM_AARCH64,     EM_AARCH64, ELFCLASS64, ELFDATA2LSB, (char*)"AARCH64"},
++    {EM_RISCV,       EM_RISCV, ELFCLASS64,   ELFDATA2LSB, (char*)"RISCV"},
+   };
+ 
+ #if  (defined IA32)
+@@ -1884,9 +1888,11 @@
+   static  Elf32_Half running_arch_code=EM_68K;
+ #elif  (defined SH)
+   static  Elf32_Half running_arch_code=EM_SH;
++#elif  (defined __riscv)
++  static  Elf32_Half running_arch_code=EM_RISCV;
+ #else
+     #error Method os::dll_load requires that one of following is defined:\
+-        AARCH64, ALPHA, ARM, AMD64, IA32, IA64, M68K, MIPS, MIPSEL, PARISC, __powerpc__, __powerpc64__, S390, SH, __sparc
++        AARCH64, ALPHA, ARM, AMD64, IA32, IA64, M68K, MIPS, MIPSEL, PARISC, __powerpc__, __powerpc64__, S390, SH, __sparc, __riscv
+ #endif
+ 
+   // Identify compatability class for VM's architecture and library's architecture
+diff -ruN openjdk-11.0.8+10.old/src/java.base/unix/native/libjava/childproc.c openjdk-11.0.8+10/src/java.base/unix/native/libjava/childproc.c
+--- openjdk-11.0.8+10.old/src/java.base/unix/native/libjava/childproc.c	2022-02-03 12:48:46.222270863 -0300
++++ openjdk-11.0.8+10/src/java.base/unix/native/libjava/childproc.c	2022-02-03 12:54:11.937999481 -0300
+@@ -33,7 +33,7 @@
+ 
+ #include "childproc.h"
+ 
+-const char * const *parentPathv;
++const char * const *parentPathv = NULL;
+ 
+ ssize_t
+ restartableWrite(int fd, const void *buf, size_t count)
+diff -ruN openjdk-11.0.8+10.old/src/java.security.jgss/share/native/libj2gss/NativeFunc.c openjdk-11.0.8+10/src/java.security.jgss/share/native/libj2gss/NativeFunc.c
+--- openjdk-11.0.8+10.old/src/java.security.jgss/share/native/libj2gss/NativeFunc.c	2022-02-03 12:48:45.702272350 -0300
++++ openjdk-11.0.8+10/src/java.security.jgss/share/native/libj2gss/NativeFunc.c	2022-02-03 12:54:44.984542523 -0300
+@@ -28,7 +28,7 @@
+ #include "NativeFunc.h"
+ 
+ /* global GSS function table */
+-GSS_FUNCTION_TABLE_PTR ftab;
++GSS_FUNCTION_TABLE_PTR ftab = NULL;
+ 
+ /* standard GSS method names (ordering is from mapfile) */
+ static const char RELEASE_NAME[]                = "gss_release_name";
+diff -ruN openjdk-11.0.8+10.old/src/jdk.sctp/unix/native/libsctp/SctpNet.c openjdk-11.0.8+10/src/jdk.sctp/unix/native/libsctp/SctpNet.c
+--- openjdk-11.0.8+10.old/src/jdk.sctp/unix/native/libsctp/SctpNet.c	2022-02-03 12:48:46.012271464 -0300
++++ openjdk-11.0.8+10/src/jdk.sctp/unix/native/libsctp/SctpNet.c	2022-02-03 12:56:00.727602666 -0300
+@@ -43,12 +43,12 @@
+ static const char* nativeSctpLib = "libsctp.so.1";
+ static jboolean funcsLoaded = JNI_FALSE;
+ 
+-sctp_getladdrs_func* nio_sctp_getladdrs;
+-sctp_freeladdrs_func* nio_sctp_freeladdrs;
+-sctp_getpaddrs_func* nio_sctp_getpaddrs;
+-sctp_freepaddrs_func* nio_sctp_freepaddrs;
+-sctp_bindx_func* nio_sctp_bindx;
+-sctp_peeloff_func* nio_sctp_peeloff;
++sctp_getladdrs_func* nio_sctp_getladdrs = NULL;
++sctp_freeladdrs_func* nio_sctp_freeladdrs = NULL;
++sctp_getpaddrs_func* nio_sctp_getpaddrs = NULL;
++sctp_freepaddrs_func* nio_sctp_freepaddrs = NULL;
++sctp_bindx_func* nio_sctp_bindx = NULL;
++sctp_peeloff_func* nio_sctp_peeloff = NULL;
+ 
+ JNIEXPORT jint JNICALL DEF_JNI_OnLoad
+   (JavaVM *vm, void *reserved) {
diff -aruN a/package/openjdk/Config.in b/package/openjdk/Config.in
--- a/package/openjdk/Config.in	2022-03-15 18:31:10.985568862 -0300
+++ b/package/openjdk/Config.in	2022-03-15 22:12:51.029779542 -0300
@@ -9,6 +9,7 @@
 	default y if BR2_arm
 	default y if BR2_i386 || BR2_x86_64
 	default y if BR2_m68k
+	default y if BR2_riscv
 	default y if BR2_powerpc || BR2_powerpc64 || BR2_powerpc64le
 	default y if BR2_sh
 
@@ -118,8 +119,8 @@
 
 choice
 	prompt "openjdk variant"
-	default BR2_PACKAGE_OPENJDK_JVM_VARIANT_SERVER if !BR2_powerpc
-	default BR2_PACKAGE_OPENJDK_JVM_VARIANT_ZERO if BR2_powerpc
+	default BR2_PACKAGE_OPENJDK_JVM_VARIANT_SERVER if !BR2_powerpc && !BR2_riscv
+	default BR2_PACKAGE_OPENJDK_JVM_VARIANT_ZERO if BR2_powerpc || BR2_riscv
 
 config BR2_PACKAGE_OPENJDK_JVM_VARIANT_CLIENT
 	bool "client"
diff -aruN a/package/openjdk/openjdk.mk b/package/openjdk/openjdk.mk
--- a/package/openjdk/openjdk.mk	2022-03-15 18:31:10.985568862 -0300
+++ b/package/openjdk/openjdk.mk	2022-03-15 22:14:16.669656936 -0300
@@ -93,7 +93,7 @@
 	--enable-headless-only \
 	--enable-openjdk-only \
 	--enable-unlimited-crypto \
-	--openjdk-target=$(GNU_TARGET_NAME) \
+	--openjdk-target=$(BR2_TOOLCHAIN_EXTERNAL_PREFIX) \
 	--with-boot-jdk=$(HOST_OPENJDK_BIN_ROOT_DIR) \
 	--with-stdc++lib=dynamic \
 	--with-debug-level=release \
